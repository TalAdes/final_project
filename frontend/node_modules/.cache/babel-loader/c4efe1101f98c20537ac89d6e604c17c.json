{"ast":null,"code":"var crypto = require('crypto');\n\nvar constants = require('constants');\n\nvar schemes = require('../schemes/schemes.js');\n\nmodule.exports = function (keyPair, options) {\n  var jsEngine = require('./js.js')(keyPair, options);\n\n  var pkcs1Scheme = schemes.pkcs1.makeScheme(keyPair, options);\n  return {\n    encrypt: function encrypt(buffer, usePrivate) {\n      if (usePrivate) {\n        return jsEngine.encrypt(buffer, usePrivate);\n      }\n\n      var padding = constants.RSA_PKCS1_OAEP_PADDING;\n\n      if (options.encryptionScheme === 'pkcs1') {\n        padding = constants.RSA_PKCS1_PADDING;\n      }\n\n      if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n        padding = options.encryptionSchemeOptions.padding;\n      }\n\n      var data = buffer;\n\n      if (padding === constants.RSA_NO_PADDING) {\n        data = pkcs1Scheme.pkcs0pad(buffer);\n      }\n\n      return crypto.publicEncrypt({\n        key: options.rsaUtils.exportKey('public'),\n        padding: padding\n      }, data);\n    },\n    decrypt: function decrypt(buffer, usePublic) {\n      if (usePublic) {\n        return jsEngine.decrypt(buffer, usePublic);\n      }\n\n      var padding = constants.RSA_PKCS1_OAEP_PADDING;\n\n      if (options.encryptionScheme === 'pkcs1') {\n        padding = constants.RSA_PKCS1_PADDING;\n      }\n\n      if (options.encryptionSchemeOptions && options.encryptionSchemeOptions.padding) {\n        padding = options.encryptionSchemeOptions.padding;\n      }\n\n      var res = crypto.privateDecrypt({\n        key: options.rsaUtils.exportKey('private'),\n        padding: padding\n      }, buffer);\n\n      if (padding === constants.RSA_NO_PADDING) {\n        return pkcs1Scheme.pkcs0unpad(res);\n      }\n\n      return res;\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}